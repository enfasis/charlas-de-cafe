#+TITLE: Clean Code
[[file+emacs:../Readme.org][Get back]]
** Naming
- Why it exists
- What it does
- How it is used
- Pronounceable (~genymdhms~: generation date, month, year)
- Noun or Noun Phrase *Class Name*
- Verb or Verb Phrase *Method Name*
- A consistent lexicon (~DeviceManager~, ~ProtocolController~)
** Functions
- Small
- Do one thing
- 20 lines long
- Descriptive Names
** Comments
#+BEGIN_QUOTE
"Don't comment bad code - rewrite it"
--Brian W. Kernighan and P.J. Plaugher
#+END_QUOTE
- Explain yourself in code
- Informative
- Writing of consequences
** Formatting
- Treat it religiously
- You read it vertically
- First paragraph should give you a synopsis of the whole story
- Don't comment bad code, rewrite it
** Objects or Data Structure
- Objects expose behavior and hide data, Data Structures expose data and have no significant behavior
- In any given system we will sometimes want the flexibility to add new data types, and so we prefer objects
- When we want flexibility to add new behaviors, so we prefer data types and procedures
** Error Handling
- Is important, but if it obscures logic, it's wrong
- Use exceptions rather than return codes
- Don't return nulls
** Boundaries
- Beware of third-party code
- Encapsulate it, so our application is isolated from its boundary interface
- It's better to depend on something you control
** Unit Tests
- You may not write production code until you have written a failing unit test
- You may not write more of a unit test than is sufficient to fail, and not compiling is failing
- You may not write more production code than is sufficient to pass the currently failing test
- Keep clean tests: readability
- One assert per test
- FIRST:
  + Fast. They should run quickly
  + Independent. They should not depend on each other
  + Repeatable. They should be repeatable in any environment
  + Self-Validating. Either they pass or fail
  + Timely. They should be written just before production
** Classes
- They should be small
- Its description should be about 25 words without using "if", "and", "or", or "but"
- Single Responsibility Principle (Trying to identify its reasons to change)
- Dependency-Inversion Principle (Should depend on abstractions, no on concrete details)
- Maintain cohesion
- Organizing for change
** Systems
#+BEGIN_QUOTE
"Complexity kills. It sucks the life out of developers, it makes products difficult to plan, build, and test."
--Ray Ozzie, CTO, Microsoft Corporation
#+END_QUOTE
- Should separate the startup process, when the application objects are constructed and the dependencies are "wired" together, from the runtime logic that takes over after startup
- Beware of Big Design Up Front because it inhibits adapting to change, due to the psychological resistance to discarding prior effort
- Use standards wisely, when they add /demonstrable/ value
- Domain-specific languages
** Emergence
- Runs all the tests
- Contains no duplication
- Expresses the intent of the programmer
- Minimizes the number of classes and methods
** Concurrency
#+BEGIN_QUOTE
"Objects are abstractions of processing. Threads are abstractions of schedule"
--James O. Coplien
#+END_QUOTE
- Keep your concurrency-related code separate from other code
- Take data encapsulation to heart; severely limit the access of any data that may be shared
- Know your library
- Know your execution models
- Learn basic algorithms for:
  + Producer-Consumer
  + Readers-Writers
  + Dinning Philosophers
- Do not ignore system failures as one-offs
** Successive Refinement
- To write clean code, you must first write dirty code /and then clean it/
- Bad code rots and ferments, becoming an inexorable weight that drags the team down.
** Misc
- /Say what you mean. Mean what you say/
- You know you are working on clean code when each routine turns out to be pretty much what you expected
- Tell the story of the system
- Each small class encapsulates a single responsibility, has a single reason to change, and collaborates with a few others to achieve the desired system behaviors
- You don't become a software craftsman by learning a list of heuristics
